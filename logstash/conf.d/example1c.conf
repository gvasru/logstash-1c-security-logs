input {
   file {
      codec => multiline {
      pattern => "^{\d{10,},(N|U|R|C),"
      what  => "previous"
      max_lines => 35000
      negate => true
    }
    # Путь, где лежат логи на сервере 1с
    path => ["C:/Program Files/1cv8/srvinfo/reg_1541/{gvas.ru:ИдентификаторБазы}/1Cv8Log/*.lgp"]
    start_position => "beginning"

    sincedb_path => "{gvas.ru:ИмяБазы}.sincedb"
    # Имя базы данных  на сервер 1с 0 будет выгружено в поле database
    type => "{gvas.ru:ИмяБазы}"
  }
}

filter {
  # Из файла убираются переводы строк. 
  mutate {
    gsub => ["message","\n",""]
    gsub => ["message","\r",""]
  }
  # Не нужные "стандартные" поля
  mutate {
    remove_field => [ "host", "@version", "@timestamp" ]
    rename => [ "type", "database" ]
  }
  #имя файла лога
  ruby {
      code => "
          event.set('raw_log_file',event.get('path').split('/')[-1].gsub('.lgp','').slice(0..7))
      "
  }
  #Парсниг лога 
  ruby {
      path => "config/parse.rb"
      script_params => { "messagefield" => "message" }
  }
  
  if "itisheader" in [tags] { 
    drop {}
  } else {

	ruby {
      path => "config/translate.rb"
      script_params => { "messagefield" => "message" }
  	}

  
    #Дата события
	date {
	  match => [ "Date", "yyyyMMddHHmmss" ]
	  target => "@timestamp"
	  remove_field => [  "Date" ] 
	}
	  #Подбор id пользователя из YML
	  translate {
	    field => "[UserInnerId]"
	    destination => "[UserId]"
	    dictionary_path => "mappings/{gvas.ru:ИмяБазы}_UserId.yml"
	    refresh_interval => 104
	    fallback => "Nothing to match!"
	  }
      #Подбор описания пользователя из YML
      translate {
        field => "[UserInnerId]"
        destination => "[User]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_UserDescr.yml"
        refresh_interval => 104
        fallback => "Nothing to match!"
      }
      #Подбор описания компьютера из YML
      translate {
        field => "[computerInnerId]"
        destination => "[host]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_ComputerId.yml"
        refresh_interval => 104
        fallback => "Nothing to match!"
      }
      #Подбор applicationInnerIdиз YML
      translate {
        field => "[NameApplicationId]"
        destination => "[NameApplication]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_Applications.yml"
        refresh_interval => 104
        fallback => "Nothing to match!"
      }
      
      #Подбор описания метаданных из YML
      translate {
        field => "[MetadataId]"
        destination => "[Metadata]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_MetadataDescr.yml"
        refresh_interval => 104
        fallback => "Nothing to match!"
      }
      #Подбор описания метаданных из YML
      translate {
        field => "[EventId]"
        destination => "[Event]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_EventId.yml"
        refresh_interval => 104
        fallback => "Nothing to match!"
      }
      
    #Подбор рабочего сервера из YML (явно ошибка - после публикации проверить)
      translate {
        field => "[WorkServerId]"
        destination => "[WorkServer]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_WorkServerId.yml"
        refresh_interval => 104
        fallback => ""
      }
      #Подбор порта рабочего сервера из YML (явно ошибка - после публикации проверить)
      translate {
        field => "[MainIpPortid]"
        destination => "[MainIpPort]"
        dictionary_path => "mappings/{gvas.ru:ИмяБазы}_WorkServerPorts.yml"
        refresh_interval => 104
        fallback => ""
      }   
		#Удаляем "внутренние" идентификаторы файла лога
        mutate {
          remove_field => [ "MainIpPortid", "WorkServerId", "EventId" , "MetadataId", "NameApplicationId", "computerInnerId", "UserInnerId"]
        }
		#Заполнение поля "message" - представление события
       ruby {
        code => "
        begin
	          @loglevel='DEBUG'
	          if event.get('Importance')=='E' then
	             @loglevel='ERROR'
	          elsif  event.get('Importance')=='W' then
	             @loglevel='WARNING'
	          elsif  event.get('Importance')=='I' then
	             @loglevel='INFORMATION'
	          elsif  event.get('Importance')=='N' then
	             @loglevel='COMMENT'
	          end
	          event.set('message',event.get('Event')+' ('+ @loglevel+')')
          rescue  Exception => e  
            event.set('inlineException',e.message ) 
          end
        "
      }
    }  
}

output {
  #В Случае ошибки - запишет данные в файл
	  if "_rubyexception" in [tags] {
	    file {
	     path => "{gvas.ru:ЛогОшибок}"
	     codec => rubydebug
	    }
	  }
	#Вывод в консоль. Можно закомментировать после отладки
 	stdout { codec => rubydebug }
    #Отправляет данные в ELASTICSEARCH
    #При тестировании закомментировать
    elasticsearch {
      hosts => [{gvas.ru:Elastic}]
      manage_template => true
      template_overwrite => true
      template_name => "1cv8log"
      template => "mappings/1Cv8Log.json"
      index => "1cv8log-%{database}-%{raw_log_file}-%{+yyyy.MM.dd}"
      action => "create"
   }
}
